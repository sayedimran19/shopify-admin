{
  "version": 3,
  "sources": ["../../../app/routes/settings.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\settings.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\settings.tsx\");\n  import.meta.hot.lastModified = \"1744006170344.0063\";\n}\n// REMIX HMR END\n\n\"use client\";\nimport { useState, useCallback } from \"react\";\nimport { Page, Layout, Card, Tabs, TextField, Button, Stack, Text, Badge, Icon, SettingToggle } from \"@shopify/polaris\";\nimport { DuplicateMinor, EmailMajor, NotificationMajor, AnalyticsMajor, OrdersMajor, InventoryMajor, StarOutlineMinor, SecureMajor, ClipboardMinor, OrderStatusMinor } from \"@shopify/polaris-icons\";\nimport \"@shopify/polaris-icons\";\nimport AppLayout from \"~/components/AppLayout\";\nexport default function Settings() {\n  _s();\n  const [selected, setSelected] = useState(0);\n  const [name, setName] = useState(\"John Doe\");\n  const [email, setEmail] = useState(\"john@example.com\");\n  const [company, setCompany] = useState(\"Acme Inc.\");\n  const [apiKey, setApiKey] = useState(\"sk_test_shopify_123456789\");\n  const [webhookUrl, setWebhookUrl] = useState(\"https://your-app.com/api/webhook\");\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [pushNotifications, setPushNotifications] = useState(true);\n  const [weeklyReports, setWeeklyReports] = useState(false);\n  const [newOrders, setNewOrders] = useState(true);\n  const [orderStatusUpdates, setOrderStatusUpdates] = useState(true);\n  const [lowInventoryAlerts, setLowInventoryAlerts] = useState(true);\n  const [customerReviews, setCustomerReviews] = useState(false);\n  const [securityAlerts, setSecurityAlerts] = useState(true);\n  const [startTime, setStartTime] = useState(\"22:00\");\n  const [endTime, setEndTime] = useState(\"08:00\");\n  const [copied, setCopied] = useState(false);\n  const handleTabChange = useCallback(selectedTabIndex => setSelected(selectedTabIndex), []);\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(apiKey);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  }, [apiKey]);\n  const tabs = [{\n    id: \"general\",\n    content: \"General\",\n    panelID: \"general-content\"\n  }, {\n    id: \"api\",\n    content: \"API\",\n    panelID: \"api-content\"\n  }, {\n    id: \"notifications\",\n    content: \"Notifications\",\n    panelID: \"notifications-content\"\n  }];\n  return <AppLayout>\n      <Page title=\"Settings\">\n        <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange} />\n\n        {selected === 0 && <Layout>\n            <Layout.AnnotatedSection title=\"Account Information\" description=\"Manage your account details and preferences\">\n              <Card>\n                <Card.Section>\n                  <TextField label=\"Name\" value={name} onChange={setName} autoComplete=\"name\" />\n                </Card.Section>\n                <Card.Section>\n                  <TextField label=\"Email\" value={email} onChange={setEmail} autoComplete=\"email\" type=\"email\" />\n                </Card.Section>\n                <Card.Section>\n                  <TextField label=\"Company\" value={company} onChange={setCompany} autoComplete=\"organization\" />\n                </Card.Section>\n                <Card.Section>\n                  <Button primary>Save Changes</Button>\n                </Card.Section>\n              </Card>\n            </Layout.AnnotatedSection>\n\n            <Layout.AnnotatedSection title=\"Current Plan\" description=\"Your current subscription plan\">\n              <Card>\n                <Card.Section>\n                  <Stack distribution=\"equalSpacing\" alignment=\"center\">\n                    <Stack vertical spacing=\"extraTight\">\n                      <Text variant=\"headingMd\">Premium Plan</Text>\n                      <Text variant=\"bodyMd\" color=\"subdued\">\n                        $29/month, billed monthly\n                      </Text>\n                    </Stack>\n                    <Badge status=\"success\">Active</Badge>\n                  </Stack>\n                </Card.Section>\n                <Card.Section>\n                  <Text variant=\"bodyMd\" color=\"subdued\">\n                    Your next billing date is April 20, 2025\n                  </Text>\n                </Card.Section>\n                <Card.Section>\n                  <Stack distribution=\"equalSpacing\">\n                    <Button outline>Cancel Subscription</Button>\n                    <Button primary url=\"/plans\">\n                      Change Plan\n                    </Button>\n                  </Stack>\n                </Card.Section>\n              </Card>\n            </Layout.AnnotatedSection>\n          </Layout>}\n\n        {selected === 1 && <Layout>\n            <Layout.AnnotatedSection title=\"API Keys\" description=\"Manage your API keys for integration with your Shopify store\">\n              <Card>\n                <Card.Section>\n                  <TextField label=\"API Key\" value={apiKey} onChange={setApiKey} readOnly connectedRight={<Button onClick={copyToClipboard} icon={copied ? DuplicateMinor : ClipboardMinor}>\n                        {copied ? \"Copied\" : \"Copy\"}\n                      </Button>} monospaced />\n                  <Text variant=\"bodyMd\" color=\"subdued\">\n                    This key gives access to your Shopify store data. Keep it secure.\n                  </Text>\n                </Card.Section>\n                <Card.Section>\n                  <TextField label=\"Webhook URL\" value={webhookUrl} onChange={setWebhookUrl} readOnly />\n                </Card.Section>\n                <Card.Section>\n                  <Button primary>Regenerate API Key</Button>\n                </Card.Section>\n              </Card>\n            </Layout.AnnotatedSection>\n          </Layout>}\n\n        {selected === 2 && <Layout>\n            <Layout.AnnotatedSection title=\"Notification Settings\" description=\"Configure how you receive notifications\">\n              <Card>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: emailNotifications ? \"Disable\" : \"Enable\",\n                onAction: () => setEmailNotifications(!emailNotifications)\n              }} enabled={emailNotifications}>\n                    <Stack>\n                      <Icon source={EmailMajor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Email Notifications</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Receive notifications via email\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: pushNotifications ? \"Disable\" : \"Enable\",\n                onAction: () => setPushNotifications(!pushNotifications)\n              }} enabled={pushNotifications}>\n                    <Stack>\n                      <Icon source={NotificationMajor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Push Notifications</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Receive push notifications in the app\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: weeklyReports ? \"Disable\" : \"Enable\",\n                onAction: () => setWeeklyReports(!weeklyReports)\n              }} enabled={weeklyReports}>\n                    <Stack>\n                      <Icon source={AnalyticsMajor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Weekly Reports</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Receive weekly summary reports\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <Button primary>Save Preferences</Button>\n                </Card.Section>\n              </Card>\n            </Layout.AnnotatedSection>\n\n            <Layout.AnnotatedSection title=\"Push Notifications\" description=\"Configure push notification preferences for your app\">\n              <Card>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: newOrders ? \"Disable\" : \"Enable\",\n                onAction: () => setNewOrders(!newOrders)\n              }} enabled={newOrders}>\n                    <Stack>\n                      <Icon source={OrdersMajor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">New Orders</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Get notified when you receive a new order\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: orderStatusUpdates ? \"Disable\" : \"Enable\",\n                onAction: () => setOrderStatusUpdates(!orderStatusUpdates)\n              }} enabled={orderStatusUpdates}>\n                    <Stack>\n                      <Icon source={OrderStatusMinor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Order Status Updates</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Get notified when an order status changes\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: lowInventoryAlerts ? \"Disable\" : \"Enable\",\n                onAction: () => setLowInventoryAlerts(!lowInventoryAlerts)\n              }} enabled={lowInventoryAlerts}>\n                    <Stack>\n                      <Icon source={InventoryMajor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Low Inventory Alerts</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Get notified when product inventory is low\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: customerReviews ? \"Disable\" : \"Enable\",\n                onAction: () => setCustomerReviews(!customerReviews)\n              }} enabled={customerReviews}>\n                    <Stack>\n                      <Icon source={StarOutlineMinor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Customer Reviews</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Get notified when you receive a new customer review\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section>\n                  <SettingToggle action={{\n                content: securityAlerts ? \"Disable\" : \"Enable\",\n                onAction: () => setSecurityAlerts(!securityAlerts)\n              }} enabled={securityAlerts}>\n                    <Stack>\n                      <Icon source={SecureMajor} color=\"base\" />\n                      <Stack vertical spacing=\"extraTight\">\n                        <Text variant=\"headingMd\">Security Alerts</Text>\n                        <Text variant=\"bodyMd\" color=\"subdued\">\n                          Get notified about important security events\n                        </Text>\n                      </Stack>\n                    </Stack>\n                  </SettingToggle>\n                </Card.Section>\n                <Card.Section title=\"Quiet Hours\">\n                  <Stack distribution=\"fillEvenly\">\n                    <TextField label=\"Start Time\" type=\"time\" value={startTime} onChange={setStartTime} />\n                    <TextField label=\"End Time\" type=\"time\" value={endTime} onChange={setEndTime} />\n                  </Stack>\n                  <Text variant=\"bodyMd\" color=\"subdued\">\n                    During quiet hours, you'll only receive critical notifications\n                  </Text>\n                </Card.Section>\n                <Card.Section>\n                  <Button primary>Save Notification Settings</Button>\n                </Card.Section>\n              </Card>\n            </Layout.AnnotatedSection>\n          </Layout>}\n      </Page>\n    </AppLayout>;\n}\n_s(Settings, \"FyJ19T5Eh465ltjOkpOkD+29Zl0=\");\n_c = Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
