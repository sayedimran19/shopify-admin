{
  "version": 3,
  "sources": ["../../../app/routes/plans.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\plans.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\plans.tsx\");\n  import.meta.hot.lastModified = \"1743994687882.0862\";\n}\n// REMIX HMR END\n\nimport { Page, Layout, Card, Text, Button, Stack, Badge, Icon } from \"@shopify/polaris\";\nimport { ChecklistMajor } from \"@shopify/polaris-icons\";\nimport AppLayout from \"~/components/AppLayout\";\nexport default function Plans() {\n  const plans = [{\n    name: \"Free\",\n    price: \"$0\",\n    description: \"Basic features for small stores\",\n    features: [\"Up to 100 queries per month\", \"Basic analytics\", \"Email support\", \"1 user account\"],\n    current: false,\n    popular: false\n  }, {\n    name: \"Starter\",\n    price: \"$19\",\n    description: \"Everything in Free plus more features\",\n    features: [\"Up to 1,000 queries per month\", \"Advanced analytics\", \"Priority email support\", \"3 user accounts\", \"Custom branding\"],\n    current: false,\n    popular: true\n  }, {\n    name: \"Premium\",\n    price: \"$49\",\n    description: \"Professional features for growing businesses\",\n    features: [\"Up to 5,000 queries per month\", \"Advanced analytics with exports\", \"Priority email & chat support\", \"10 user accounts\", \"Custom branding\", \"API access\", \"Webhooks\"],\n    current: true,\n    popular: false\n  }, {\n    name: \"Enterprise\",\n    price: \"$199\",\n    description: \"Advanced features for large businesses\",\n    features: [\"Unlimited queries\", \"Advanced analytics with exports\", \"24/7 phone, email & chat support\", \"Unlimited user accounts\", \"Custom branding\", \"API access\", \"Webhooks\", \"Dedicated account manager\", \"Custom integrations\"],\n    current: false,\n    popular: false\n  }];\n  return <AppLayout>\n      <Page title=\"Subscription Plans\">\n        <Layout>\n          {plans.map(plan => <Layout.Section key={plan.name} oneQuarter>\n              <Card>\n                <Card.Section>\n                  <Stack distribution=\"equalSpacing\">\n                    <Text variant=\"headingLg\">{plan.name}</Text>\n                    {plan.popular && <Badge status=\"info\">Popular</Badge>}\n                    {plan.current && <Badge status=\"success\">Current</Badge>}\n                  </Stack>\n                </Card.Section>\n                <Card.Section>\n                  <Stack vertical spacing=\"tight\">\n                    <Text variant=\"headingXl\">{plan.price}</Text>\n                    <Text variant=\"bodyMd\" color=\"subdued\">\n                      /month\n                    </Text>\n                  </Stack>\n                  <Text variant=\"bodyMd\" color=\"subdued\">\n                    {plan.description}\n                  </Text>\n                </Card.Section>\n                <Card.Section title=\"Features\">\n                  <Stack vertical>\n                    {plan.features.map(feature => <Stack alignment=\"center\" key={feature}>\n                        <Icon source={ChecklistMajor} color=\"success\" />\n                        <Text variant=\"bodyMd\">{feature}</Text>\n                      </Stack>)}\n                  </Stack>\n                </Card.Section>\n                <Card.Section>\n                  {plan.current ? <Button fullWidth disabled>\n                      Current Plan\n                    </Button> : <Button fullWidth primary={plan.popular}>\n                      {plan.name === \"Free\" ? \"Get Started\" : \"Upgrade\"}\n                    </Button>}\n                </Card.Section>\n              </Card>\n            </Layout.Section>)}\n\n          <Layout.Section>\n            <Card title=\"Need a custom plan?\">\n              <Card.Section>\n                <Text variant=\"bodyMd\">\n                  Contact our sales team for a custom solution tailored to your specific needs\n                </Text>\n              </Card.Section>\n              <Card.Section>\n                <Button outline>Contact Sales</Button>\n              </Card.Section>\n            </Card>\n          </Layout.Section>\n        </Layout>\n      </Page>\n    </AppLayout>;\n}\n_c = Plans;\nvar _c;\n$RefreshReg$(_c, \"Plans\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
