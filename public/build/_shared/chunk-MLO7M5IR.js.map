{
  "version": 3,
  "sources": ["../../../app/components/Charts.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\Charts.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\Charts.tsx\");\n  import.meta.hot.lastModified = \"1742543212726.8628\";\n}\n// REMIX HMR END\n\n\"use client\";\nimport { useEffect, useRef } from \"react\";\nexport function BarChart({\n  data\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Set dimensions\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = 40;\n    const chartWidth = width - padding * 2;\n    const chartHeight = height - padding * 2;\n\n    // Find max value for scaling\n    const maxValue = Math.max(...data.map(item => item.value));\n    const barWidth = chartWidth / data.length - 10;\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.moveTo(padding, padding);\n    ctx.lineTo(padding, height - padding);\n    ctx.lineTo(width - padding, height - padding);\n    ctx.strokeStyle = \"#ddd\";\n    ctx.stroke();\n\n    // Draw bars\n    data.forEach((item, index) => {\n      const x = padding + index * (barWidth + 10) + 5;\n      const barHeight = item.value / maxValue * chartHeight;\n      const y = height - padding - barHeight;\n\n      // Draw bar\n      ctx.fillStyle = \"#5c6ac4\";\n      ctx.fillRect(x, y, barWidth, barHeight);\n\n      // Draw label\n      ctx.fillStyle = \"#637381\";\n      ctx.font = \"12px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(item.name, x + barWidth / 2, height - padding + 15);\n\n      // Draw value\n      ctx.fillStyle = \"#212b36\";\n      ctx.font = \"12px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(item.value.toString(), x + barWidth / 2, y - 5);\n    });\n  }, [data]);\n  return <canvas ref={canvasRef} width={600} height={300} style={{\n    width: \"100%\",\n    height: \"100%\"\n  }} />;\n}\n_s(BarChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = BarChart;\nexport function LineChart({\n  data\n}) {\n  _s2();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Set dimensions\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = 40;\n    const chartWidth = width - padding * 2;\n    const chartHeight = height - padding * 2;\n\n    // Find max value for scaling\n    const maxValue = Math.max(...data.map(item => item.value));\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.moveTo(padding, padding);\n    ctx.lineTo(padding, height - padding);\n    ctx.lineTo(width - padding, height - padding);\n    ctx.strokeStyle = \"#ddd\";\n    ctx.stroke();\n\n    // Draw line\n    ctx.beginPath();\n    data.forEach((item, index) => {\n      const x = padding + index / (data.length - 1) * chartWidth;\n      const y = height - padding - item.value / maxValue * chartHeight;\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n    ctx.strokeStyle = \"#5c6ac4\";\n    ctx.lineWidth = 2;\n    2;\n    ctx.stroke();\n\n    // Draw points\n    data.forEach((item, index) => {\n      const x = padding + index / (data.length - 1) * chartWidth;\n      const y = height - padding - item.value / maxValue * chartHeight;\n      ctx.beginPath();\n      ctx.arc(x, y, 4, 0, Math.PI * 2);\n      ctx.fillStyle = \"#5c6ac4\";\n      ctx.fill();\n      ctx.strokeStyle = \"#ffffff\";\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw label\n      ctx.fillStyle = \"#637381\";\n      ctx.font = \"12px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(item.name, x, height - padding + 15);\n\n      // Draw value\n      ctx.fillStyle = \"#212b36\";\n      ctx.font = \"12px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(item.value.toString(), x, y - 10);\n    });\n  }, [data]);\n  return <canvas ref={canvasRef} width={600} height={300} style={{\n    width: \"100%\",\n    height: \"100%\"\n  }} />;\n}\n_s2(LineChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c2 = LineChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"BarChart\");\n$RefreshReg$(_c2, \"LineChart\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
